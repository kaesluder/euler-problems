euler56.rkt:(define (number-to-list n)
euler56.rkt:(define (number-to-list2 n)
euler56.rkt:        (cons (remainder n 10) (number-to-list2 (quotient n 10)))))
euler56.rkt:  (apply + (number-to-list num)))
euler57.rkt:(define (number-to-list n)
euler62.rkt:(define (number-to-list n)
euler62.rkt:        (cons (remainder n 10) (number-to-list (quotient n 10)))))
euler62.rkt:(define (sort-key x) (sort (number-to-list x) <))
euler65.rkt:(define (number-to-list n)
euler65.rkt:        (cons (remainder n 10) (number-to-list (quotient n 10)))))
euler65.rkt:  (apply + (number-to-list (e65-num))))
euler66.rkt:(define (number-to-list n)
euler66.rkt:        (cons (remainder n 10) (number-to-list (quotient n 10)))))
euler66.rkt:  (define start-results (cdr (number-to-list sr)))
euler66.rkt:  (define start (car (number-to-list sr)))
euler68.rkt:          (map number->string (apply append seq)))))
euler69.rkt:(define (number-to-list n)
euler69.rkt:        (cons (remainder n 10) (number-to-list (quotient n 10)))))
euler69.rkt:  (define ax (sort (number-to-list a) <))
euler69.rkt:  (define bx (sort (number-to-list b) <))
euler74.rkt:(define/memo (number-to-list n)
euler74.rkt:        (cons (remainder n 10) (number-to-list (quotient n 10)))))
euler74.rkt:  (apply + (map factorial-c (number-to-list n))))
euler74.rkt:                    (remove-duplicates (perm (number-to-list i)))))))
euler80.rkt:(define (number-to-list n)
euler80.rkt:        (cons (remainder n 10) (number-to-list (quotient n 10)))))
euler80.rkt:  (define start-results (cdr (number-to-list sr)))
euler80.rkt:  (define start (car (number-to-list sr)))
euler92.rkt:(define (number-to-list n)
euler92.rkt:        (cons (remainder n 10) (number-to-list (quotient n 10)))))
euler98.rkt:  (sort (map char->number (string->list (number->string x))) <))
euler98.rkt:(define (number-anagram? x y)
euler98.rkt:  (define number-freqs (make-hash))
euler98.rkt:    (define oldn (hash-ref number-freqs nf -inf.0))
euler98.rkt:       (hash-set! number-freqs nf (max oldn nmax))]
euler98.rkt:       (hash-set! number-freqs nf nmax)]))
euler98.rkt:  number-freqs)
euler99.rkt:(define (number-lines li) ;;attach line numbers to our values
euler99.rkt:        (number-lines (load-exponents)))))
